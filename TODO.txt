TODO: 
	ROUGH CAMERA SYSTEM (4h) [] - @Current
		-> load the mission1_level and test the camera 
		-> 

	COLLISION RESOLVER PROBLEM (4h) []

	INPUT BUFFERING FOR GAMEPLAY MOVEMENT (4h) []

	FIX: black background when having transparent background (2h) 
		(normal rendering works, only the portion not working) []
		(NOTE: test on the sdl2 backend)

	DESTROY ALL THE FONT RESOURCES AFTER USING (SDL DESTROY) -> CURRENTLY HAVE MEMORY LEAKS (1H) []

	ATTACH THE COLLIDER WITH THE ANIMATION (4h) []

	PLACE ALL THE STUFF ON THE LEVEL (4h) []

	PARALAX BACKGROUND (2h) []

	RENDER ONLY PART OF THE MAP (2h) []
		-> get the portion of the map and only render that part 
		-> may be get 2 mapsize portion so that the scrolling smoother
		-> only get new portion when the camera get's move by so much :v (event = camera move by X -> append new portion)

	PHAN HOACH KHONG GIAN (4h) []

BUG: 
	FULLSCREEN BUG: AFTER TOGGLE THE FULLSCREEN VS SMALLSCREEN, TEXTURE TURN BLACK
	FLICKERING WHEN MOVING (2h) []
	
DONE: 
	ROUGH PHYSICS  (2h) [X]
		-> COLLISION: [X]
			-> box collider 
			-> circle collider (do this first)
			-> line collision 
			-> capsule collision 

		PHAKE PHYSICS: @Backburner - done 50%
			all the physics will be just state machine and interpolation with different ease function
			state: 
				jump -> from bottom to peak 
				fall -> from peak to bottom (or some ) -> gravity is just fall state 
				onground -> just pure left and right move - no fall, no jump

			let's consider moving (left, right - raw translate no animation or anything) is not a state machine:)) 
				-> so that it can combine with both jump and fall 

			 -> PHYSICS STATE MACHINE DIFFERENT FROM ANIMATION STATE MACHINE 
			 -> LET'S MAKES A PHYSICS STATE MACHINE: 
				state: 
					onground -> just pure left and right move - no fall, no jump @1st 
					jump -> from bottom to peak 
					fall -> from peak to bottom (or some ) -> gravity is just fall state 

	SHOWING DEBUG INFO (2h) [X]
		text: Millis per frame: 42.1196, FPS: 23.7419  [X]

		line: line collider [X]
		dot [X]
		rectangle: box collider  [X]
		circle: circle collider  [X]

	GO FULL SCREEN (2h) [X]
		2 solutions: 
			use fixed resolution then scale it up (this one seems simpler) -> @@@ use this 
			or scale everything to match the solution ?? 
	NORMALIZED COORDINATE SYSTEM (4h) [X]
		-> coordinate goes from -1 to 1 on each axis (the horizontal might be larger than abs(1) cause it's longer :v)
		-> use the normalized coord in the game code 
		-> the backend gonna translate convert it back to the one it needs 
	USING TILED SPRITE SHEET (2h) [X]
		-> load a single texture into an array of animation using 2 inputs: rows, columns  
	ROUGH ANIMATION SYSTEM (2h) [X]
	DOUBLE BUFFERING SO THAT WE DON'T SEE THE TEAR ON THE SCREEN (2h) [X] - we still saw the tear, kinda :))
	GAME LOOP WITH GOOD TIMING IN SDL2 (2h) [X]
	GET THE GAME INPUT WORKING (1h) [X]
	ROUGH CONTROL (2h) [X]
	PLATFORM INDEPENDENT THE WHOLE THING (2h) [X]nternet (kind of)