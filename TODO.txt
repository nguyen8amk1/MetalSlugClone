TODO: 
	SHOWING DEBUG INFO (2h) []
		text: Seconds perframe: 0.0421196, Millis per frame: 42.1196, FPS: 23.7419, MCPF: 75.6704 -> @Show this 

		line: line collider 
		dot 
		rectangle: box collider 
		circle: circle collider 

	FIX: black background when having transparent background (2h) 
		(normal rendering works, only the portion not working) []
		(NOTE: test on the sdl2 backend)


	ROUGH PHYSICS  (2h) []
		-> COLLISION: 
			-> box collider, 
			-> circle collider (do this first)

		-> MOVING:
			basic movement using vector (maybe)

		-> JUMPING: 
			predetermined jump i guess 
			-> jump arc 

	ROUGH CAMERA SYSTEM (4h) []
		-> can show part of the screen and move around 



	PHAN HOACH KHONG GIAN (4h) []


	USING TILED SPRITE SHEET (2h) []
		-> FUTURE:  write a python program (or a class in the game itself) to take an abitrary sprite sheet 
					and output the frames into a json file which contains the rect of each frames 
BUG: 
	FULLSCREEN BUG: AFTER TOGGLE THE FULLSCREEN VS SMALLSCREEN, TEXTURE TURN BLACK
	FLICKERING WHEN MOVING (2h) []
	
DONE: 
	GO FULL SCREEN (2h) [X]
		2 solutions: 
			use fixed resolution then scale it up (this one seems simpler) -> @@@ use this 
			or scale everything to match the solution ?? 
	NORMALIZED COORDINATE SYSTEM (4h) [X]
		-> coordinate goes from -1 to 1 on each axis (the horizontal might be larger than abs(1) cause it's longer :v)
		-> use the normalized coord in the game code 
		-> the backend gonna translate convert it back to the one it needs 
	USING TILED SPRITE SHEET (2h) [X]
		-> load a single texture into an array of animation using 2 inputs: rows, columns  
	ROUGH ANIMATION SYSTEM (2h) [X]
	DOUBLE BUFFERING SO THAT WE DON'T SEE THE TEAR ON THE SCREEN (2h) [X] - we still saw the tear, kinda :))
	GAME LOOP WITH GOOD TIMING IN SDL2 (2h) [X]
	GET THE GAME INPUT WORKING (1h) [X]
	ROUGH CONTROL (2h) [X]
	PLATFORM INDEPENDENT THE WHOLE THING (2h) [X]nternet (kind of)